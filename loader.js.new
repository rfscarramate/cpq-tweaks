/**
 * Loader principal do CPQ Tweaks
 * Responsável pelo carregamento assíncrono condicional dos módulos de lógica e interface (UI)
 * com caching local para performance e fallback online.
 */

// URL base dos recursos
const BASE = "https://rfscarramate.github.io/cpq-tweaks";

// Checagem inicial da rota e dispositivo para carga condicional
const PATH = window.location.pathname.toLowerCase();
const isQuotes = PATH.includes("quotes");
const isMobile = window.innerWidth <= 900 && /Android|iPhone|iPad/i.test(navigator.userAgent);

// Constantes para cache localStorage
const CACHE_PREFIX = "cpqtweaks";
const CACHE_TIME = 1000 * 60 * 60 * 24; // 24 horas

// Configuração global e flag de debug
window.CPQENV = window.CPQENV || { debug: false };
const DEBUG = window.CPQENV.debug;

/**
 * Log condicional para depuração
 * @param  {...any} args Mensagens para logar no console
 */
function log(...args) {
  if (!DEBUG) return;
  try {
    console.log("CPQ-Loader:", ...args);
  } catch {}
}

/**
 * Retorna timestamp atual para controle de cache e validade
 * @returns {number} timestamp em ms
 */
function now() {
  return Date.now();
}

/**
 * Faz fetch GET do texto de um recurso, forçando bypass de cache HTTP
 * @param {string} url URL do recurso a carregar
 * @returns {Promise<string>} Texto do recurso
 * @throws {Error} Se falhar requisição HTTP
 */
async function fetchText(url) {
  const resp = await fetch(`${url}?t=${now()}`, { cache: "no-store" });
  if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
  return await resp.text();
}

/**
 * Gera chave de cache localStorage padronizada
 * @param {string} key Identificador do recurso
 * @returns {string} Chave para localStorage
 */
function getCacheKey(key) {
  return `${CACHE_PREFIX}:${key}`;
}

/**
 * Recupera recurso do cache local ou retorna null se expirado ou inválido
 * @param {string} key Identificador do recurso
 * @returns {string|null} Código JavaScript em texto ou null
 */
function getCache(key) {
  try {
    const raw = localStorage.getItem(getCacheKey(key));
    if (!raw) return null;
    const data = JSON.parse(raw);
    // Se cache expirou, remove e retorna null
    if (now() - data.timestamp > CACHE_TIME) {
      localStorage.removeItem(getCacheKey(key));
      return null;
    }
    return data.text;
  } catch {
    return null;
  }
}

/**
 * Salva recurso em cache localStorage junto com timestamp
 * @param {string} key Identificador do recurso
 * @param {string} text Código JavaScript em texto a salvar
 */
function setCache(key, text) {
  try {
    const data = { text, timestamp: now() };
    localStorage.setItem(getCacheKey(key), JSON.stringify(data));
  } catch {}
}

/**
 * Carrega e executa módulo JavaScript de forma segura e assíncrona
 * - Tenta primeira carregar do cache; se não há cache válido busca na rede e atualiza cache
 * - O código é executado via Function para limitar escopo e facilitar debug
 *
 * @param {string} key Identificador do módulo (cache)
 * @param {string} path URL do módulo para fetch
 */
async function loadModule(key, path) {
  log(`Loading module: ${key} from ${path}`);
  let code = getCache(key);
  if (!code) {
    log(`Cache miss: fetching ${path}`);
    code = await fetchText(path);
    setCache(key, code);
  } else {
    log(`Cache hit: ${key}`);
  }
  // Executa o código no escopo de window
  const modFunc = new Function("window", code + `
//# sourceURL=${path}`);
  modFunc(window);
}

/**
 * Função principal que executa o loader
 * Carrega módulos de lógica (always, quotes se aplicável)
 * Carrega módulos UI apenas em mobile e se quotes for aplicável
 * Dispara evento 'tweaksLoaded' ao final
 */
async function runLoader() {
  try {
    await loadModule("logic-core", `${BASE}/logic/core.js`);
    if (isQuotes) {
      await loadModule("logic-quotes", `${BASE}/logic/quotes.js`);
    }
    if (isMobile) {
      await loadModule("ui-core", `${BASE}/ui/core.js`);
      if (isQuotes) {
        await loadModule("ui-quotes", `${BASE}/ui/quotes.js`);
      }
    }
    window.dispatchEvent(new CustomEvent("tweaksLoaded"));
    log("All modules loaded successfully.");
  } catch (e) {
    // Erro geral capturado para evitar crash
    console.error("Error loading CPQ Tweaks:", e);
  }
}

// Executa carregador principal automaticamente ao incluir script
runLoader();
